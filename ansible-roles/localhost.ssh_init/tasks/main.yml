---
# tasks file for localhost.ssh_init
- name: Touch .ssh/config file.
  file:
    path: "{{ ansible_env.HOME }}/.ssh/config"
    state: touch

# Couldn't get blockinfile with state = absent to work. Used multi-line sed instead.
- name: Remove previous SSH config settings for this organization.
  shell: "sed -i.ansible_backup '/^# {{ vpc.resource_tags.Organization }}/,/^# {{ vpc.resource_tags.Organization }}/d' {{ ansible_env.HOME }}/.ssh/config"

# - name: Set CIDR subnet fact.
#   set_fact:
#     CIDR_fact: "{{ vpc.cidr_block

# NOTE.  IF YOU USE VIRGINIA, IT WILL BE EC2.INTERNAL, NOT COMPUTE.INTERNAL
- name: Configure SSH proxy host.
  blockinfile:
    dest: "{{ ansible_env.HOME }}/.ssh/config"
    marker: "# {{ vpc.resource_tags.Organization }}"
    block: |
      Host ip-{{ vpc.cidr_block.split('.')[0]}}-{{ vpc.cidr_block.split('.')[1]}}-*-*.compute.internal
           ProxyCommand ssh -i ~/.ssh/{{ vpc.keypair }} -W %h:%p -q {{ vpc.image_user }}@{{ bastion_public_dns_name }}
           ServerAliveInterval 30

- name: Remove all old known_hosts entries.
  lineinfile:
    dest: "{{ ansible_env.HOME }}/.ssh/known_hosts"
    regexp: "^.* # {{ vpc.resource_tags.Organization }}"
    state: absent

- name: Get SSH key from AWS system log.
  shell: aws ec2 get-console-output \
           --region {{ vpc.region }} \
           --instance-id {{ item.id }} \
           --output text | sed -n 's/ecdsa-sha2-nistp256 \([^ ]*\).*/\1/p'
  register: host_key_results
  with_items: "{{ ec2_facts.instances }}"
  until: host_key_results.stdout != ''
  retries: 50
  environment:
    AWS_ACCESS_KEY_ID: "{{ vault.aws_access_key }}"
    AWS_SECRET_ACCESS_KEY: "{{ vault.aws_secret_key }}"

- name: debug
  debug:
    msg: "{{ host_key_results.results }}"

- name: Import SSH fingerpints - private IP addresses.
  lineinfile:
    dest: "{{ ansible_env.HOME }}/.ssh/known_hosts"
    line: "{{ item.0.private_dns_name }},{{ item.0.private_ip_address }} ecdsa-sha2-nistp256 {{ item.1.stdout }} # {{ vpc.resource_tags.Organization }}"
  when: item.0.state == 'running'
  with_together:
    - "{{ ec2_facts.instances }}"
    - "{{ host_key_results.results }}"

- name: Import SSH fingerpints - public IP addresses.
  lineinfile:
    dest: "{{ ansible_env.HOME }}/.ssh/known_hosts"
    line: "{{ item.0.public_dns_name}} ecdsa-sha2-nistp256 {{ item.1.stdout }} # {{ vpc.resource_tags.Organization }}"
  when: item.0.state == 'running' and item.0.public_dns_name != ''
  with_together:
    - "{{ ec2_facts.instances }}"
    - "{{ host_key_results.results }}"
