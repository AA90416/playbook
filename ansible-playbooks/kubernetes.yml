---
# kubernetes.yml
#
# This playbook deploys an OpenVPN server, a cfssl certificate instance, and a full Kubernetes cluster, integrated with AWS.
# It is based on the `kubernetes-aws` terraform.
#

# Initial AWS configuration, variables, and scrapes AWS public keys.
- hosts: localhost
  connection: local
  gather_facts: yes
  vars_files:
    - vars/kubernetes.yml
  roles:
    # - role: localhost.ssh_key_configure
    - role: aws.ec2_facts
      filters:
        "tag:Environment": "{{ env }}"
        instance-state-name: running
    - role: localhost.aws_ssh_keys
    - role: ansible.groups_init

# Intial configuration of the OpenVPN server.  Will be skipped if not created/used.
# Initial raw configuration
- hosts: "{{ env }}-openvpn_public"
  become: yes
  gather_facts: no
  user: ubuntu
  roles:
    - role: ubuntu.raw_install_python

# Configure openvpn instance (skipped if not created)
- hosts: "{{ env }}-openvpn_public"
  become: yes
  gather_facts: yes
  remote_user: ubuntu
  vars_files:
    - vars/kubernetes.yml
    - vars/openvpn.yml
  roles:
    - role: instance.ssh_aws_public_key
    - role: instance.hosts
    - role: instance.docker_install
    - role: instance.openvpn_configure
    - role: instance.openvpn_create_user_config

# Intial configuration Kubernetes instances
# Initial raw configuration
- hosts: cfssl:etcd:controller:node
  become: yes
  gather_facts: no
  user: ubuntu
  roles:
    - role: ubuntu.raw_install_python

# Configure CFSSL
- hosts: cfssl
  become: yes
  gather_facts: yes
  user: ubuntu
  vars_files:
    - vars/kubernetes.yml
  roles:
    - role: instance.ssh_aws_public_key
    - role: instance.hosts
    - role: instance.volume
    - role: instance.docker_install
    - role: instance.cfssl_kubernetes

# Configure the etcd cluster
- hosts: etcd
  become: yes
  gather_facts: yes
  user: ubuntu
  vars_files:
    - vars/kubernetes.yml
  roles:
    - role: instance.ssh_aws_public_key
    - role: instance.hosts
    - role: instance.volume
    - role: instance.docker_install
    - role: instance.etcd

# Configure the Kubernetes controller cluster
- hosts: controller
  become: yes
  gather_facts: yes
  user: ubuntu
  vars_files:
    - vars/kubernetes.yml
  roles:
    - role: instance.ssh_aws_public_key
    - role: instance.hosts
    - role: instance.volume
    - role: instance.controller

# Configure the kubelets
- hosts: node
  become: yes
  gather_facts: yes
  user: ubuntu
  vars_files:
    - vars/kubernetes.yml
  roles:
    - role: instance.ssh_aws_public_key
    - role: instance.hosts
    - role: instance.node

# Deploy pods and services, including Weave-net, Kube-DNS
- hosts: node[0]
  become: yes
  gather_facts: yes
  user: ubuntu
  vars_files:
    - vars/kubernetes.yml
  roles:
    - role: kubernetes.initialization
