---
# demo_aws_internal Rancher variables.
demo_aws_internal_rancher:
  convoy_gluster: |
    {"environment": {"VOLUME_POOL": "glustervolume", "GLUSTERFS_SERVICE": "glusterfs/glusterfs-server"}, "startOnCreate": true, "dockerCompose": "convoy-gluster:\n  labels:\n    io.rancher.container.create_agent: 'true'\n    io.rancher.scheduler.global: 'true'\n  privileged: true\n  pid: host\n  volumes:\n    - /lib/modules:/lib/modules:ro\n    - /proc:/host/proc\n    - /var/run:/host/var/run\n    - /etc/docker/plugins:/etc/docker/plugins\n  external_links:\n    - \"${GLUSTERFS_SERVICE}:glusterfs\"\n  image: rancher/convoy-agent:v0.3.0\n  command: volume-agent-glusterfs\n\nconvoy-gluster-storagepool:\n  labels:\n    io.rancher.container.create_agent: 'true'\n  volumes:\n    - /var/run:/host/var/run\n  image: rancher/convoy-agent:v0.3.0\n  command: storagepool-agent\n", "name": "convoy-gluster", "rancherCompose": ".catalog:\n    name: \"Convoy GlusterFS\"\n    version: \"v0.2\"\n    description: \"Convoy GlusterFS - Docker volume plugin\"\n    questions:\n     - variable: \"VOLUME_POOL\"\n       description: \"Name of the GlusterFS Volume\"\n       label: \"GlusterFS Volume\"\n       required: true\n       type: \"string\"\n       default: my_vol\n     - variable: \"GLUSTERFS_SERVICE\"\n       label: \"GlusterFS Service\"\n       type: \"service\"\n       required: true\n       description: Service that is running GlusterFS\n\nconvoy-gluster:\n    metadata:\n        volume_pool: \"${VOLUME_POOL}\"\n    health_check:\n        request_line: GET /healthcheck HTTP/1.0\n        port: 10241\n        interval: 2000\n        response_timeout: 2000\n        unhealthy_threshold: 3\n        healthy_threshold: 2\n\nconvoy-gluster-storagepool:\n    scale: 1\n    health_check:\n        request_line: GET /healthcheck HTTP/1.0\n        port: 10241\n        interval: 2000\n        response_timeout: 2000\n        unhealthy_threshold: 3\n        healthy_threshold: 2\n", "externalId": "system-catalog://community:convoy-gluster:1" }
  docker_elk: |
    { "startOnCreate": true,  "dockerCompose": "elasticsearch:\n  command: elasticsearch -Des.network.host=0.0.0.0\n  image: elasticsearch:latest\n  ports:\n    - \"9200:9200\"\n    - \"9300:9300\"\n  labels:\n    io.rancher.scheduler.affinity:container_label_soft_ne: io.rancher.stack.name=$${stack_name}\n  volume-driver: convoy-gluster\n  volumes:\n    - elasticsearch-data:/opt/elasticsearch/data\nlogstash:\n  command: logstash -f /etc/logstash/conf.d\n  image: logstash:latest\n  labels:\n    io.rancher.scheduler.affinity:container_label_soft_ne: io.rancher.stack.name=$${stack_name}\n  links:\n    - elasticsearch\n  ports:\n    - \"5000:5000\"\n    - \"5043:5043\"\n  volume-driver: convoy-gluster\n  volumes:\n    - logstash-conf:/etc/logstash/conf.d\nkibana:\n  image: kibana:latest\n  labels:\n    io.rancher.scheduler.affinity:container_label_soft_ne: io.rancher.stack.name=$${stack_name}\n  links:\n    - elasticsearch\n  ports:\n    - \"5601:5601\"\n  environment:\n    ELASTICSEARCH_URL: http://elasticsearch:9200\n  volume-driver: convoy-gluster\n  volumes:\n    - kibana-conf:/opt/kibana/config/\nnginx:\n  command: nginx -g \"daemon off;\" -c /opt/nginx-conf/nginx.conf\n  image: nginx:latest\n  labels:\n    io.rancher.scheduler.affinity:container_label_soft_ne: io.rancher.stack.name=$${stack_name}\n  links:\n    - kibana\n  ports:\n    - \"80:80\"\n  volume-driver: convoy-gluster\n  volumes:\n  - nginx-conf:/opt/nginx-conf\n  - nginx-logs:/var/log/nginx\n",  "name": "docker-elk",  "rancherCompose": "nginx:\n  scale: 1\nlogstash:\n  scale: 1\nkibana:\n  scale: 1\nelasticsearch:\n  scale: 1"}
  glusterfs: |
    { "environment": {"VOLUME_NAME": "glustervolume", "network_mode": "container:glusterfs-server" }, "startOnCreate": true, "dockerCompose": "glusterfs-server:\n  image: rancher/glusterfs:v0.2.1\n  volumes_from:\n    - glusterfs-data\n  labels:\n    io.rancher.container.hostname_override: container_name\n    io.rancher.sidekicks: glusterfs-daemon,glusterfs-data,glusterfs-volume-create\n  command: giddyup leader elect --proxy-tcp-port=2160 /opt/rancher/peerprobe.sh ${network_mode}\nglusterfs-daemon:\n  image: rancher/glusterfs:v0.2.1\n  net: ${network_mode}\n  cap_add:\n    - SYS_ADMIN\n  volumes_from:\n    - glusterfs-data\n  labels:\n    io.rancher.container.dns: 'true'\n    io.rancher.container.network: 'true'\n    io.rancher.container.hostname_override: container_name\n    io.rancher.scheduler.affinity:container_label_soft_ne: io.rancher.stack_service.name=$${stack_name}/glusterfs-server\n  command: glusterd -p /var/run/gluster.pid --no-daemon --log-file=-\nglusterfs-volume-create:\n  image: rancher/glusterfs:v0.2.1\n  command: /opt/rancher/replicated_volume_create.sh ${network_mode}\n  net: 'container:glusterfs-server'\n  volumes_from:\n    - glusterfs-data\n  labels:\n    io.rancher.container.hostname_override: container_name\n    io.rancher.container.start_once: true\n\n#\n# WARNING -- DO NOT CHANGE ANYTHING BELOW\n# DATA LOSS!!!! CAN OCCURR DURING UPGRADE\n#\nglusterfs-data:\n  image: busybox\n  command: /bin/true\n  net: none\n  volumes:\n    - /var/run\n    - /var/lib/glusterd\n  labels:\n    io.rancher.container.hostname_override: container_name\n    io.rancher.container.start_once: true\n\n", "name": "glusterfs", "rancherCompose": ".catalog:\n  name: \"GlusterFS\"\n  version: \"3.7.9-rancher1\"\n  description: \"Gluster FS (3x) replicated volume\"\n  questions:\n    - variable: \"VOLUME_NAME\"\n      description: \"Name to give the Gluster volume\"\n      label: \"Volume Name\"\n      required: true\n      default: \"my_vol\"\n      type: \"string\"\n    - variable: \"network_mode\"\n      description: |\n        To use Gluster on the rancher network, use the default setting.\n        If you want to expose Gluster to non-Rancher clients, use host. \n        Take note, that Gluster will be accessible to anything accessible to\n        the host. Do not use this configuration in an untrusted setting.\n      label: \"Gluster Networking Mode\"\n      required: true\n      type: \"enum\"\n      default: \"container:glusterfs-server\"\n      options:\n        - \"container:glusterfs-server\"\n        - \"host\"\nglusterfs-server:\n  scale: 3\n  retain_ip: true\n  metadata:\n    volume_name: \"${VOLUME_NAME}\"\n", "externalId": "catalog://community:glusterfs:0"}
  volume_builder_tag: '1.0'
  volumes:
    - name: elasticsearch-data
      description: "Elasticsearch data volume."
    - name: logstash-conf
      description: "Logstash config volume."
    - name: kibana-conf
      description: "Kibana config volume."
    - name: nginx-conf
      description: "Nginx config volume."
    - name: nginx-logs
      description: "Nginx logs volume."
    - name: testing
      description: "test"
